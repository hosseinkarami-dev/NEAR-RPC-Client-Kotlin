name: Create Tag & Release on merge to main

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  tag-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (full history and tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest commit info
        id: commit_info
        run: |
          # latest commit subject and author email
          LAST_SUBJECT=$(git log -1 --pretty=format:%s)
          LAST_EMAIL=$(git log -1 --pretty=format:%ae)
          echo "last_subject=${LAST_SUBJECT}" >> $GITHUB_OUTPUT
          echo "last_email=${LAST_EMAIL}" >> $GITHUB_OUTPUT
          echo "Subject: $LAST_SUBJECT"
          echo "Author email: $LAST_EMAIL"

      - name: Check if this is a regenerated commit
        id: should_run
        run: |
          SUBJECT="${{ steps.commit_info.outputs.last_subject }}"
          EMAIL="${{ steps.commit_info.outputs.last_email }}"

          echo "Checking if commit indicates regeneration..."

          if [[ "$EMAIL" == "automation@github.com" ]]; then
            echo "Detected automation author email."
            echo "run_release=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          if echo "$SUBJECT" | grep -qi "regenerate client\|regenerate openapi\|regenerate"; then
            echo "Detected regenerate in commit message."
            echo "run_release=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "No regenerate indicator found. Skipping tag/release."
          echo "run_release=false" >> $GITHUB_OUTPUT

      - name: Stop if not a regenerate commit
        if: ${{ steps.should_run.outputs.run_release == 'false' }}
        run: |
          echo "This push doesn't look like a regenerated commit. Exiting."
          exit 0

      - name: Determine new tag version
        id: tag
        run: |
          # Get last tag, default to v0.0.0
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"

          # increment patch version by 1
          IFS='.' read -r MAJOR MINOR PATCH <<<"${LAST_TAG#v}"
          # ensure numeric fallback
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}
          NEW_TAG="v${MAJOR}.${MINOR}.$((PATCH+1))"

          echo "new_tag=${NEW_TAG}" >> $GITHUB_OUTPUT
          echo "New tag determined: ${NEW_TAG}"

      - name: Create and push tag
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          NEW_TAG="${{ steps.tag.outputs.new_tag }}"
          echo "Creating tag ${NEW_TAG} and pushing..."
          git tag "${NEW_TAG}"
          git push "https://x-access-token:${PAT_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" "${NEW_TAG}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.new_tag }}
          name: "Release ${{ steps.tag.outputs.new_tag }}"
          body: |
            ðŸš€ Automated release generated by workflow.
            This release was created automatically after merging the regenerated client into main.
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}