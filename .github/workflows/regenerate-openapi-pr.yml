name: Regenerate NEAR RPC Client (auto PR, merge & release)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # daily run (every day at midnight)

# Note: removed `push: branches: [ main ]` trigger to avoid self-triggering

permissions:
  contents: write
  pull-requests: write

jobs:
  regenerate-merge-release:
    runs-on: ubuntu-latest

    steps:
      # Avoid infinite loop triggered by GitHub Actions bot
      - name: Exit if triggered by GitHub Actions bot
        if: github.actor == 'github-actions[bot]'
        run: |
          echo "Triggered by GitHub Actions bot; exiting to avoid loop."
          exit 0

      # Checkout repository (full history and tags)
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      # Setup JDK
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      # Grant execute permission for Gradle
      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew

      # Run Generator (regenerates client + models)
      - name: Run Generator
        run: ./gradlew :generator:run --args="--openapi-url https://raw.githubusercontent.com/near/nearcore/master/chain/jsonrpc/openapi/openapi.json" --no-daemon

      # Build and run tests
      - name: Build project (and run tests)
        run: ./gradlew build --stacktrace --no-daemon

      # Prepare branch, commit regenerated sources (DEBUG version)
      - name: Prepare branch, commit regenerated sources (DEBUG)
        id: commit
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          set -euo pipefail

          echo "=== Debug: system info ==="
          uname -a || true
          echo "Git version:"
          git --version || true
          echo "whoami:"
          whoami || true
          echo "id:"
          id || true
          echo "hostname:"
          hostname || true

          echo
          echo "=== Debug: relevant env vars ==="
          env | grep -i '^GIT' || true
          env | grep -i 'HOME\|USER\|RUNNER' || true
          echo "GITHUB_* vars (subset):"
          env | egrep '^(GITHUB_RUN_NUMBER|GITHUB_SHA|GITHUB_REPOSITORY|GITHUB_ACTOR|GITHUB_WORKFLOW)=' || true

          echo
          echo "=== Debug: git config (show origin) ==="
          git config --list --show-origin || true

          echo
          echo "=== Debug: global gitconfig file ==="
          if [ -f "$HOME/.gitconfig" ]; then
            echo "Found $HOME/.gitconfig:"
            sed -n '1,200p' "$HOME/.gitconfig" || true
          else
            echo "$HOME/.gitconfig not found"
          fi

          echo
          echo "=== Debug: repo state before changes ==="
          git status --porcelain=2 --branch || true
          git rev-parse --abbrev-ref HEAD || true
          git log -1 --pretty=format:'last-commit: %h %an <%ae> %ad' || true

          # --- now set identity as we tried before (explicit) ---
          AUTHOR_NAME="GitHub Actions Bot"
          AUTHOR_EMAIL="automation@github.com"
          echo "Setting AUTHOR_NAME=$AUTHOR_NAME AUTHOR_EMAIL=$AUTHOR_EMAIL"

          git config --global user.name "$AUTHOR_NAME" || true
          git config --global user.email "$AUTHOR_EMAIL" || true

          export GIT_AUTHOR_NAME="$AUTHOR_NAME"
          export GIT_AUTHOR_EMAIL="$AUTHOR_EMAIL"
          export GIT_COMMITTER_NAME="$AUTHOR_NAME"
          export GIT_COMMITTER_EMAIL="$AUTHOR_EMAIL"

          echo
          echo "=== After setting git config & env ==="
          git config --list --show-origin || true
          env | grep -i '^GIT' || true
          echo "Contents of $HOME:"
          ls -la "$HOME" || true

          echo
          echo "=== Create branch, add, commit (attempt) ==="
          SHORT_SHA=${GITHUB_SHA:0:8}
          BRANCH="regenerate-openapi-${GITHUB_RUN_NUMBER}-${SHORT_SHA}"
          echo "Will create branch: $BRANCH"

          # create branch (show result)
          git checkout -b "$BRANCH" || { echo "git checkout failed"; git status || true; exit 1; }

          # add changes
          git add -A || { echo "git add failed"; git status || true; exit 1; }

          # show staged files
          echo "Staged files:"
          git diff --staged --name-status || true

          # If no staged changes, exit early (same behavior as before)
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "pr_required=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Try committing with -c override and capture output & exit code
          echo "Attempting git commit (with -c override)..."
          set +e
          git -c user.name="$AUTHOR_NAME" -c user.email="$AUTHOR_EMAIL" commit -m "fix: regenerate client from OpenAPI" 2>&1 | tee /tmp/git-commit-output.txt
          COMMIT_EXIT=$?
          set -e
          echo "git commit exit code: $COMMIT_EXIT"
          echo "---- git commit output (tail) ----"
          tail -n +1 /tmp/git-commit-output.txt || true

          if [ "$COMMIT_EXIT" -ne 0 ]; then
            echo "Commit failed. Printing more diagnostics..."

            echo
            echo "git config --list --show-origin (again):"
            git config --list --show-origin || true

            echo
            echo "Check global gitconfig content:"
            if [ -f "$HOME/.gitconfig" ]; then
              sed -n '1,200p' "$HOME/.gitconfig" || true
            else
              echo "$HOME/.gitconfig not present"
            fi

            echo
            echo "Printing any local repo git config:"
            if [ -f .git/config ]; then
              sed -n '1,200p' .git/config || true
            else
              echo ".git/config missing?"
            fi

            echo
            echo "Environment GIT_* again:"
            env | grep -i '^GIT' || true

            # fail the step with the original commit output
            exit $COMMIT_EXIT
          fi

          # push branch using PAT_TOKEN if commit succeeded
          git push "https://x-access-token:${PAT_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" "$BRANCH"

          echo "pr_required=true" >> "$GITHUB_OUTPUT"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"

      # Auto-create PR and merge if changes exist
      - name: Auto-create and merge PR
        if: steps.commit.outputs.pr_required == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const branch = '${{ steps.commit.outputs.branch }}';
            const title = `chore: regenerate client from OpenAPI (${branch})`;
            const body = `This PR regenerates the NEAR RPC client and models from the latest OpenAPI spec.\n\nAutomatically merged after generation.`;

            // Create PR
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              head: branch,
              base: "main",
              body
            });

            // Auto-merge PR
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.data.number,
              merge_method: "squash"
            });

      # Stop if no changes
      - name: Output when no changes
        if: steps.commit.outputs.pr_required != 'true'
        run: echo "No regenerated changes â€” nothing to create a PR for."

      # Make sure local main is up-to-date with remote before tagging
      - name: Prepare local main for tagging
        if: steps.commit.outputs.pr_required == 'true'
        run: |
          set -euo pipefail
          # fetch latest main and tags
          git fetch origin main --tags
          # ensure we are on main and match remote
          git checkout main
          git reset --hard origin/main

      # Determine new tag version (only if we actually created a PR & merged)
      - name: Determine new tag version
        if: steps.commit.outputs.pr_required == 'true'
        id: tag
        run: |
          set -euo pipefail
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          IFS='.' read -r MAJOR MINOR PATCH <<<"${LAST_TAG#v}"
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}
          NEW_TAG="v${MAJOR}.${MINOR}.$((PATCH+1))"
          echo "new_tag=${NEW_TAG}" >> $GITHUB_OUTPUT
          echo "New tag determined: ${NEW_TAG}"

      # Create and push tag, but first check whether HEAD already has a tag
      - name: Create and push tag
        id: create_tag
        if: steps.commit.outputs.pr_required == 'true'
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          set -euo pipefail
          NEW_TAG="${{ steps.tag.outputs.new_tag }}"

          # Ensure tags are fetched
          git fetch --tags

          # If HEAD already has any tag, skip creating a new tag
          if git tag --points-at HEAD | grep -q .; then
            echo "Tag already exists that points at HEAD. Skipping tag creation."
            echo "tag_created=false" >> $GITHUB_OUTPUT
            echo "existing_tag=$(git tag --points-at HEAD | head -n1)" >> $GITHUB_OUTPUT
            exit 0
          fi

          # If the computed NEW_TAG already exists (race or pre-existing), avoid duplicate
          if git rev-parse "refs/tags/${NEW_TAG}" >/dev/null 2>&1; then
            echo "Computed tag ${NEW_TAG} already exists. Skipping tag creation to avoid collision."
            echo "tag_created=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Create annotated tag and push
          git tag -a "${NEW_TAG}" -m "Release ${NEW_TAG} (automated)"
          git push "https://x-access-token:${PAT_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" "${NEW_TAG}"

          echo "tag_created=true" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.create_tag.outputs.tag_created == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.new_tag }}
          name: "Release ${{ steps.tag.outputs.new_tag }}"
          body: |
            ðŸš€ Automated release generated by workflow.
            This release was created automatically after merging the regenerated client into main.
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
