name: Regenerate NEAR RPC Client (auto PR & release)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

permissions:
  contents: write
  pull-requests: write

jobs:
  regenerate-release:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set Git identity (early)
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "automation@github.com"

      - name: Exit if triggered by bot
        if: github.actor == 'github-actions[bot]'
        run: exit 0

      - name: Setup JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Grant Gradle permission
        run: chmod +x ./gradlew

      - name: Run Generator
        run: ./gradlew :generator:run --args="--openapi-url https://raw.githubusercontent.com/near/nearcore/master/chain/jsonrpc/openapi/openapi.json" --no-daemon

      - name: Build project
        run: ./gradlew build --stacktrace --no-daemon

      - name: Commit changes
        id: commit
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          set -euo pipefail
          
          # ست کردن identity فقط برای این repository
          git config user.name "GitHub Actions Bot"
          git config user.email "automation@github.com"
          
          BRANCH="regenerate-${GITHUB_RUN_NUMBER}-${GITHUB_SHA::8}"
          git checkout -b "$BRANCH"
          git add .
          if git diff --staged --quiet; then
            echo "pr_required=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          git commit -m "fix: regenerate client"
          git push https://x-access-token:${PAT_TOKEN}@github.com/${GITHUB_REPOSITORY}.git "$BRANCH"
          echo "pr_required=true" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT


      - name: Create & merge PR
        if: steps.commit.outputs.pr_required == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const branch = '${{ steps.commit.outputs.branch }}';
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `chore: regenerate client (${branch})`,
              head: branch,
              base: "main",
              body: "Automated regeneration of NEAR RPC client"
            });
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.data.number,
              merge_method: "squash"
            });

      - name: Tag & release
        if: steps.commit.outputs.pr_required == 'true'
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          set -e
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          IFS='.' read -r MAJOR MINOR PATCH <<<"${LAST_TAG#v}"
          NEW_TAG="v${MAJOR}.${MINOR}.$((PATCH+1))"
          git tag -a "$NEW_TAG" -m "Release $NEW_TAG (automated)"
          git push https://x-access-token:${PAT_TOKEN}@github.com/${GITHUB_REPOSITORY}.git "$NEW_TAG"
          # export NEW_TAG so it's available to next steps
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Create GitHub Release
        if: steps.commit.outputs.pr_required == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: "Release ${{ env.NEW_TAG }}"
          body: "🚀 Automated release after regeneration"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
