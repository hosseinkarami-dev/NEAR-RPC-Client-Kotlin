name: Regenerate NEAR RPC Client (auto PR, merge & release)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # daily run (every day at midnight)

permissions:
  contents: write
  pull-requests: write

jobs:
  regenerate-merge-release:
    runs-on: ubuntu-latest

    steps:
      - name: Exit if triggered by GitHub Actions bot
        if: github.actor == 'github-actions[bot]'
        run: |
          echo "Triggered by GitHub Actions bot; exiting to avoid loop."
          exit 0

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew

      - name: Run Generator
        run: ./gradlew :generator:run --args="--openapi-url https://raw.githubusercontent.com/near/nearcore/master/chain/jsonrpc/openapi/openapi.json" --no-daemon

      - name: Build project (and run tests)
        run: ./gradlew build --stacktrace --no-daemon

      # ------------------- Commit Branch -------------------
      - name: Prepare branch, commit regenerated sources
        id: commit
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          set -euo pipefail
          
          # Set identity locally to avoid unknown committer
          git config user.email "automation@github.com"
          git config user.name "GitHub Actions Bot"
          
          SHORT_SHA=${GITHUB_SHA:0:8}
          BRANCH="regenerate-openapi-${GITHUB_RUN_NUMBER}-${SHORT_SHA}"
          git checkout -b "$BRANCH"
          
          git add .
          if git diff --staged --quiet; then
          echo "No changes to commit"
          echo "pr_required=false" >> "$GITHUB_OUTPUT"
          exit 0
          fi
          
          git commit -m "fix: regenerate client from OpenAPI"
          git push https://x-access-token:${PAT_TOKEN}@github.com/${GITHUB_REPOSITORY}.git "$BRANCH"
          
          echo "pr_required=true" >> "$GITHUB_OUTPUT"
          echo "branch=$BRANCH"

      # ------------------- Auto PR & Merge -------------------
      - name: Auto-create and merge PR
        if: steps.commit.outputs.pr_required == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const branch = '${{ steps.commit.outputs.branch }}';
            const title = `chore: regenerate client from OpenAPI (${branch})`;
            const body = `This PR regenerates the NEAR RPC client and models from the latest OpenAPI spec.\n\nAutomatically merged after generation.`;

            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              head: branch,
              base: "main",
              body
            });

            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.data.number,
              merge_method: "squash"
            });

      - name: Output when no changes
        if: steps.commit.outputs.pr_required != 'true'
        run: echo "No regenerated changes â€” nothing to create a PR for."

      - name: Prepare local main for tagging
        if: steps.commit.outputs.pr_required == 'true'
        run: |
          set -euo pipefail
          git fetch origin main --tags
          git checkout main
          git reset --hard origin/main

      - name: Determine new tag version
        if: steps.commit.outputs.pr_required == 'true'
        id: tag
        run: |
          set -euo pipefail
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          IFS='.' read -r MAJOR MINOR PATCH <<<"${LAST_TAG#v}"
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}
          NEW_TAG="v${MAJOR}.${MINOR}.$((PATCH+1))"
          echo "new_tag=${NEW_TAG}" >> $GITHUB_OUTPUT
          echo "New tag determined: ${NEW_TAG}"

      # ------------------- Create & Push Tag -------------------
      - name: Create and push tag
        id: create_tag
        if: steps.commit.outputs.pr_required == 'true'
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          set -euo pipefail
          NEW_TAG="${{ steps.tag.outputs.new_tag }}"
          
          # Set identity locally
          git config user.name "GitHub Actions Bot"
          git config user.email "automation@github.com"
          
          git fetch --tags
          
          if git tag --points-at HEAD | grep -q .; then
          echo "Tag already exists that points at HEAD. Skipping tag creation."
          echo "tag_created=false" >> $GITHUB_OUTPUT
          exit 0
          fi
          
          if git rev-parse "refs/tags/${NEW_TAG}" >/dev/null 2>&1; then
          echo "Computed tag ${NEW_TAG} already exists. Skipping tag creation."
          echo "tag_created=false" >> $GITHUB_OUTPUT
          exit 0
          fi
          
          git tag -a "${NEW_TAG}" -m "Release ${NEW_TAG} (automated)"
          git push "https://x-access-token:${PAT_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" "${NEW_TAG}"
          
          echo "tag_created=true" >> $GITHUB_OUTPUT
      - name: Set git identity for release step
        if: steps.create_tag.outputs.tag_created == 'true'
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "automation@github.com"

      - name: Create GitHub Release
        if: steps.create_tag.outputs.tag_created == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.new_tag }}
          name: "Release ${{ steps.tag.outputs.new_tag }}"
          body: |
            ðŸš€ Automated release generated by workflow.
            This release was created automatically after merging the regenerated client into main.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: "GitHub Actions Bot"
          GIT_AUTHOR_EMAIL: "automation@github.com"
          GIT_COMMITTER_NAME: "GitHub Actions Bot"
          GIT_COMMITTER_EMAIL: "automation@github.com"
