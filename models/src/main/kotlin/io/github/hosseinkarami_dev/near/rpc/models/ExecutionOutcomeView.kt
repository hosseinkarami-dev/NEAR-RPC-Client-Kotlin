package io.github.hosseinkarami_dev.near.rpc.models

import kotlin.String
import kotlin.collections.List
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

@Serializable
public data class ExecutionOutcomeView(
  /**
   *  * The id of the account on which the execution happens. For transaction this is signer_id,
   * for receipt this is receiver_id.
   */
  @SerialName("executor_id")
  public val executorId: AccountId,
  /**
   *  * The amount of the gas burnt by the given transaction or receipt.
   */
  @SerialName("gas_burnt")
  public val gasBurnt: NearGas,
  /**
   *  * Logs from this transaction or receipt.
   */
  @SerialName("logs")
  public val logs: List<String>,
  /**
   *  * Execution metadata, versioned
   */
  @SerialName("metadata")
  public val metadata: ExecutionMetadataView?,
  /**
   *  * Receipt IDs generated by this transaction or receipt.
   */
  @SerialName("receipt_ids")
  public val receiptIds: List<CryptoHash>,
  /**
   *  * Execution status. Contains the result in case of successful execution.
   */
  @SerialName("status")
  public val status: ExecutionStatusView,
  /**
   *  * The amount of tokens burnt corresponding to the burnt gas amount.
   * This value doesn't always equal to the `gas_burnt` multiplied by the gas price, because
   * the prepaid gas price might be lower than the actual gas price and it creates a deficit.
   * `tokens_burnt` also contains the penalty subtracted from refunds, while
   * `gas_burnt` only contains the gas that we actually burn for the execution.
   */
  @SerialName("tokens_burnt")
  public val tokensBurnt: NearToken,
)
